
import re
import time
import traceback
import os
import json
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from core.settings_manager import get_application_path
from datetime import datetime
from typing import List, Dict, Optional, Any, Union
from urllib.parse import unquote

try:
    from enum import Enum
except ImportError:
    class Enum:
        pass

from core.settings_manager import settings_manager

try:
    from utils.logger import logger, print_and_log
except ImportError:
    class SimpleLogger:
        @staticmethod
        def info(msg): print(f"[INFO] {msg}")
        @staticmethod
        def error(msg): print(f"[ERROR] {msg}")
        @staticmethod
        def warning(msg): print(f"[WARNING] {msg}")
        @staticmethod
        def debug(msg): print(f"[DEBUG] {msg}")
    
    logger = SimpleLogger()
    def print_and_log(msg): print(msg)


class TradeConfirmationManager:
    
    def __init__(self, username: str, mafile_path: str, api_key: Optional[str] = None):
        self.username = username
        self.mafile_path = mafile_path
        self._api_key = api_key
        
        try:
            self.steam_guard_data = self._load_steam_guard(mafile_path)
            logger.info(f"‚úÖ Steam Guard –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {username}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Steam Guard –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        
        self._steam_client = None
        self._initialize_steam_client()
        
        logger.info(f"üîÑ Trade Confirmation Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}")
    
    def _load_steam_guard(self, mafile_path: str) -> Dict[str, Any]:
        with open(mafile_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def _initialize_steam_client(self):
        try:
            from pysda.steampy.client import SteamClient
            
            password = settings_manager.get_account_password(self.username)
            if not password:
                raise Exception(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {self.username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            steam_id = None
            if 'Session' in self.steam_guard_data and 'SteamID' in self.steam_guard_data['Session']:
                steam_id = str(self.steam_guard_data['Session']['SteamID'])
            elif 'steamid' in self.steam_guard_data:
                steam_id = str(self.steam_guard_data['steamid'])
            
            sessions_dir = os.path.join(os.path.dirname(__file__), '..', 'data', 'sessions')
            os.makedirs(sessions_dir, exist_ok=True)
            session_path = os.path.join(sessions_dir, f"{self.username}.pkl")
            
            self._steam_client = SteamClient(
                username=self.username,
                password=password,
                steam_guard=self.mafile_path,
                steam_id=steam_id,
                session_path=session_path
            )
            
            logger.info(f"üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –¥–ª—è {self.username}")
            self._steam_client.login_if_need_to()
            
            logger.info(f"‚úÖ Steam –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {self.username}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Steam –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    def _get_steam_client(self):
        if not self._steam_client:
            self._initialize_steam_client()
        return self._steam_client
    
    def generate_guard_code(self) -> str:
        try:
            import sys
            import os
            current_dir = os.path.dirname(os.path.abspath(__file__))
            from pysda.steampy.guard import generate_one_time_code
            
            shared_secret = self.steam_guard_data.get('shared_secret')
            if not shared_secret:
                raise ValueError("shared_secret –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Steam Guard –¥–∞–Ω–Ω—ã—Ö")
            
            code = generate_one_time_code(shared_secret)
            return code
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Guard –∫–æ–¥–∞: {e}")
            raise
    
    def get_or_create_api_key(self) -> Optional[str]:
        try:
            steam_client = self._get_steam_client()
            
            logger.info("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞...")
            
            if self._api_key:
                logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {self._api_key[:10]}...")
                steam_client._api_key = self._api_key
                return self._api_key
            
            if hasattr(steam_client, '_api_key') and steam_client._api_key:
                logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á: {steam_client._api_key[:10]}...")
                return steam_client._api_key
            
            logger.info("üîë –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
            api_key = self._get_api_key_from_web(steam_client)
            
            if api_key:
                steam_client._api_key = api_key
                self._api_key = api_key
                logger.info(f"‚úÖ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: {api_key[:10]}...")
                return api_key
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å API –∫–ª—é—á")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: {e}")
            return None
    
    def _get_api_key_from_web(self, steam_client) -> Optional[str]:
        try:
            logger.info("üåê –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
            
            req = steam_client._session.get('https://steamcommunity.com/dev/apikey')
            
            if req.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ API –∫–ª—é—á–∞: {req.status_code}")
                return None
            
            if 'Sign In' in req.text and 'login' in req.url.lower():
                logger.error("‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cookies.")
                return None
            
            api_key_pattern = r"([0-9A-F]{32})"
            data_apikey = re.findall(api_key_pattern, req.text, re.IGNORECASE)
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(data_apikey)}")
            
            valid_keys = []
            for key in data_apikey:
                if len(key) == 32 and all(c in '0123456789ABCDEF' for c in key.upper()):
                    valid_keys.append(key)
            
            if len(valid_keys) >= 1:
                apikey = valid_keys[0]
                steam_client._api_key = apikey
                logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {apikey[:10]}...")
                return apikey
            else:
                logger.info("üîç API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å...")
                
                if 'You must have a validated email address' in req.text:
                    logger.error("‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email")
                    return None
                elif 'Register for a Steam Web API Key' in req.text or 'domain name that will be using' in req.text:
                    logger.info("üÜï API –∫–ª—é—á –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å...")
                    return self._create_api_key(steam_client)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ API –∫–ª—é—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    logger.debug(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {req.text[:500]}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –≤–µ–±: {e}")
            return None
    
    def _create_api_key(self, steam_client) -> Optional[str]:
        try:
            logger.info("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á...")
            
            response = steam_client._session.get('https://steamcommunity.com/dev/apikey')
            
            sessionid_patterns = [
                r'g_sessionID = "([^"]+)"',
                r'sessionid":"([^"]+)"',
                r'sessionId":"([^"]+)"'
            ]
            
            sessionid = None
            for pattern in sessionid_patterns:
                sessionid_match = re.search(pattern, response.text)
                if sessionid_match:
                    sessionid = sessionid_match.group(1)
                    break
            
            if not sessionid:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ sessionid –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞")
                return None
            
            logger.info(f"üîë –ù–∞–π–¥–µ–Ω sessionid: {sessionid[:10]}...")
            
            create_data = {
                'domain': f'autoLogin_{int(time.time())}',
                'agreeToTerms': 'agreed',
                'sessionid': sessionid,
                'Submit': 'Register'
            }
            
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞...")
            create_response = steam_client._session.post(
                'https://steamcommunity.com/dev/registerkey',
                data=create_data,
                headers={
                    'Referer': 'https://steamcommunity.com/dev/apikey'
                }
            )
            
            logger.info(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {create_response.status_code}")
            
            if create_response.status_code == 200:
                response_text = create_response.text.lower()
                success_indicators = [
                    'successful',
                    'created',
                    'registered',
                    'api key'
                ]
                
                if any(indicator in response_text for indicator in success_indicators):
                    logger.info("‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ...")
                    time.sleep(2)
                    return self._get_api_key_from_web(steam_client)
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª—é—á")
                    logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {create_response.text[:200]}")
                    return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞: {create_response.status_code}")
                logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {create_response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞: {e}")
            return None
    
    def validate_api_key(self, api_key: str) -> bool:
        try:
            if not api_key or len(api_key) != 32:
                return False
            
            steam_client = self._get_steam_client()
            
            test_params = {
                'key': api_key,
                'steamid': self.steam_id
            }
            
            response = steam_client._session.get(
                'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/',
                params=test_params
            )
            
            if response.status_code == 200:
                data = response.json()
                if 'response' in data and 'players' in data['response']:
                    logger.info("‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω")
                    return True
            
            logger.error("‚ùå API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–∞: {e}")
            return False
    
    def get_guard_confirmations(self) -> List[Dict[str, Any]]:
        try:
            steam_client = self._get_steam_client()
            
            logger.info("üîê –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Guard...")
            
            if not hasattr(steam_client, 'steam_guard') or not steam_client.steam_guard:
                logger.warning("‚ö†Ô∏è Steam Guard –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return []
            
            import sys
            import os
            current_dir = os.path.dirname(os.path.abspath(__file__))
            from pysda.steampy.confirmation import ConfirmationExecutor, Confirmation
            
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            confirmations_page = confirmation_executor._fetch_confirmations_page()
            confirmations_json = confirmations_page.json()
            
            if not confirmations_json.get('success'):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return []
            
            all_confirmations = confirmations_json.get('conf', [])
            
            if not all_confirmations:
                logger.info("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return []
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_confirmations)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard")
            
            detailed_confirmations = []
            for i, conf_data in enumerate(all_confirmations, 1):
                try:
                    confirmation_type = self._determine_confirmation_type_from_json(conf_data)
                    
                    conf = Confirmation(
                        data_confid=conf_data['id'],
                        nonce=conf_data['nonce'],
                        creator_id=int(conf_data['creator_id'])
                    )
                    
                    detailed_conf = {
                        'id': conf_data['id'],
                        'nonce': conf_data['nonce'],
                        'creator_id': int(conf_data['creator_id']),
                        'type': confirmation_type,
                        'description': conf_data.get('headline', f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        'confirmation': conf,
                        'executor': confirmation_executor
                    }
                    
                    detailed_confirmations.append(detailed_conf)
                    
                    logger.info(f"[{i}/{len(all_confirmations)}] {confirmation_type}: {detailed_conf['description']}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {i}: {e}")
                    continue
            
            return detailed_confirmations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard: {e}")
            logger.debug(traceback.format_exc())
            return []
    
    def _determine_confirmation_type_from_json(self, conf_data: Dict[str, Any]) -> str:
        try:
            conf_type = conf_data.get('type', 'unknown')
            
            type_mapping = {
                '1': 'Trade',
                '2': 'Market Transaction', 
                '3': 'Account Recovery',
                '4': 'Phone Number Change',
                '5': 'Account Creation',
                '6': 'Store Transaction',
                '7': 'Market Listing',
                '8': 'Account Email Change',
                '9': 'Password Change',
                '10': 'API Key Access',
                '11': 'Steam Guard Change',
                '12': 'Community Market Purchase',
                '13': 'Steam Store Purchase',
                '14': 'Gift Purchase'
            }
            
            return type_mapping.get(str(conf_type), f'Unknown Type {conf_type}')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return 'Unknown'
    
    def confirm_guard_confirmation(self, confirmation_obj) -> bool:
        try:
            steam_client = self._get_steam_client()
            
            logger.info(f"üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Guard: {confirmation_obj.data_confid}")
            
            import sys
            import os
            current_dir = os.path.dirname(os.path.abspath(__file__))
            steampy_path = os.path.join(current_dir, 'steampy')
            from pysda.steampy.confirmation import ConfirmationExecutor
            
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            response = confirmation_executor._send_confirmation(confirmation_obj)
            
            if response and response.get('success'):
                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {confirmation_obj.data_confid} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                return True
            else:
                error_message = response.get('error', 'Unknown error') if response else 'No response'
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {confirmation_obj.data_confid}: {error_message}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Guard: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def process_free_trades(self, auto_accept: bool = True, auto_confirm: bool = True) -> Dict[str, int]:
        
            
        stats = {
            'found_free_trades': 0,
            'accepted_trades': 0,
            'confirmed_trades': 0,
            'errors': 0
        }
        
        try:
            logger.info("üéÅ –ò—â–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–µ–π–¥—ã (–ø–æ–¥–∞—Ä–∫–∏)...")
            
            steam_client = self._get_steam_client()
            
            logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã...")
            active_offers = steam_client.get_trade_offers(merge=False)
            
            if not active_offers:
                logger.info("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return stats
            
            free_trades = []
            received_offers = active_offers.get('trade_offers_received', [])
            
            for offer in received_offers:
                items_to_give = len(offer.get('items_to_give', []))
                items_to_receive = len(offer.get('items_to_receive', []))
                
                if items_to_give == 0 and items_to_receive > 0:
                    free_trades.append(offer)
                    logger.info(f"üéÅ –ù–∞–π–¥–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {offer['tradeofferid']} (–ø–æ–ª—É—á–∞–µ–º {items_to_receive} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)")
            
            stats['found_free_trades'] = len(free_trades)
            
            if not free_trades:
                logger.info("‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return stats
            
            logger.info(f"üéÅ –ù–∞–π–¥–µ–Ω–æ {len(free_trades)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤")
            
            for offer in free_trades:
                try:
                    trade_id = offer['tradeofferid']
                    
                    if auto_accept:
                        logger.info(f"üåê –ü—Ä–∏–Ω–∏–º–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {trade_id}")
                        
                        if auto_confirm:
                            result = steam_client.accept_trade_offer_with_confirmation(trade_id)
                        else:
                            result = steam_client.accept_trade_offer(trade_id)
                        
                        if result and not result.get('strError'):
                            stats['accepted_trades'] += 1
                            logger.info(f"‚úÖ –ü—Ä–∏–Ω—è—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {trade_id}")
                            
                            if auto_confirm and result.get('tradeid'):
                                stats['confirmed_trades'] += 1
                                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {trade_id}")
                        else:
                            error_msg = result.get('strError', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥ {trade_id}: {error_msg}")
                            stats['errors'] += 1
                    else:
                        logger.info(f"‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥ –Ω–∞–π–¥–µ–Ω, –Ω–æ auto_accept –æ—Ç–∫–ª—é—á–µ–Ω: {trade_id}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–∞ {offer.get('tradeofferid', 'unknown')}: {e}")
                    stats['errors'] += 1
                    
                time.sleep(1)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤:")
            logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ: {stats['found_free_trades']}")
            logger.info(f"  - –ü—Ä–∏–Ω—è—Ç–æ: {stats['accepted_trades']}")
            logger.info(f"  - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {stats['confirmed_trades']}")
            logger.info(f"  - –û—à–∏–±–æ–∫: {stats['errors']}")
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤: {e}")
            logger.debug(traceback.format_exc())
            stats['errors'] += 1
            return stats

    def process_confirmation_needed_trades(self, auto_confirm: bool = True) -> Dict[str, int]:
        
            
        stats = {
            'found_confirmation_needed': 0,
            'confirmed_trades': 0,
            'errors': 0
        }
        
        try:
            logger.info("üîë –ò—â–µ–º —Ç—Ä–µ–π–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            
            steam_client = self._get_steam_client()
            
            logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã...")
            all_offers = steam_client.get_trade_offers(merge=False)
            
            if not all_offers:
                logger.info("‚ÑπÔ∏è –¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return stats
            
            confirmation_needed_trades = []
            
            for offer in all_offers.get('trade_offers_received', []):
                if offer.get('trade_offer_state') == 9:
                    confirmation_needed_trades.append(offer)
                    logger.info(f"üîë –í—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–π–¥ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {offer['tradeofferid']}")
            
            for offer in all_offers.get('trade_offers_sent', []):
                if offer.get('trade_offer_state') == 9:
                    confirmation_needed_trades.append(offer)
                    logger.info(f"üîë –ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–π–¥ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {offer['tradeofferid']}")
            
            stats['found_confirmation_needed'] = len(confirmation_needed_trades)
            
            if not confirmation_needed_trades:
                logger.info("‚ÑπÔ∏è –¢—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return stats
            
            logger.info(f"üîë –ù–∞–π–¥–µ–Ω–æ {len(confirmation_needed_trades)} —Ç—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            
            for offer in confirmation_needed_trades:
                try:
                    trade_id = offer['tradeofferid']
                    logger.info(f"üîë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–π–¥: {trade_id}")
                    
                    if auto_confirm:
                        result = steam_client.confirm_accepted_trade_offer(trade_id)
                        
                        if result and not result.get('strError'):
                            stats['confirmed_trades'] += 1
                            logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ç—Ä–µ–π–¥: {trade_id}")
                        else:
                            error_msg = result.get('strError', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥ {trade_id}: {error_msg}")
                            stats['errors'] += 1
                    else:
                        logger.info(f"‚ÑπÔ∏è –¢—Ä–µ–π–¥ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–æ auto_confirm –æ—Ç–∫–ª—é—á–µ–Ω: {trade_id}")
                        
                    time.sleep(1)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–∞ {offer.get('tradeofferid', 'unknown')}: {e}")
                    stats['errors'] += 1
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤:")
            logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['found_confirmation_needed']}")
            logger.info(f"  - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {stats['confirmed_trades']}")
            logger.info(f"  - –û—à–∏–±–æ–∫: {stats['errors']}")
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            logger.debug(traceback.format_exc())
            stats['errors'] += 1
            return stats


class IntegratedTradeManager:
    
    def __init__(self):
        self.managers = {}
    
    def _get_manager(self, username: str) -> TradeConfirmationManager:
        if username not in self.managers:
            mafile_path = os.path.join(get_application_path(), "data", "mafiles", f"{username}.maFile")
            if not os.path.exists(mafile_path):
                raise Exception(f"–§–∞–π–ª {mafile_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            self.managers[username] = TradeConfirmationManager(
                username=username,
                mafile_path=mafile_path
            )
        
        return self.managers[username]
    
    def get_confirmations(self, username: str) -> Dict[str, Any]:
        try:
            manager = self._get_manager(username)
            confirmations = manager.get_guard_confirmations()
            
            return {
                "success": True,
                "confirmations": confirmations,
                "message": f"–ü–æ–ª—É—á–µ–Ω–æ {len(confirmations)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è {username}"
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {str(e)}"
            }
    
    def confirm_all(self, username: str) -> Dict[str, Any]:
        try:
            manager = self._get_manager(username)
            
            confirmations = manager.get_guard_confirmations()
            if not confirmations:
                return {
                    "success": True,
                    "confirmed_count": 0,
                    "message": f"–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è {username}"
                }
            
            confirmed_count = 0
            for conf in confirmations:
                try:
                    if manager.confirm_guard_confirmation(conf['confirmation']):
                        confirmed_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {conf['id']}: {e}")
                    continue
            
            return {
                "success": True,
                "confirmed_count": confirmed_count,
                "message": f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {confirmed_count} –∏–∑ {len(confirmations)} –¥–ª—è {username}"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}"
            }
    
    def auto_accept_gifts(self, username: str) -> Dict[str, Any]:
        try:
            manager = self._get_manager(username)
            stats = manager.process_free_trades(auto_accept=True, auto_confirm=True)
            
            return {
                "success": True,
                "stats": stats,
                "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['found_free_trades']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è {username}"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤: {str(e)}"
            }
    
    def auto_confirm_trades(self, username: str) -> Dict[str, Any]:
        try:
            manager = self._get_manager(username)
            stats = manager.process_confirmation_needed_trades(auto_confirm=True)
            
            return {
                "success": True,
                "stats": stats,
                "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['found_confirmation_needed']} —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è {username}"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}"
            }
