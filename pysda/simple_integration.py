import asyncio
import os
import json
from typing import Optional, Dict, Any, List
from core.settings_manager import settings_manager


class SimplePasswordChanger:
    
    def __init__(self):
        self.name = "Password Changer"
    
    def change_password_for_account(self, account_name: str, new_password: Optional[str] = None) -> Dict[str, Any]:
        
            
        try:
            accounts = settings_manager.get_accounts()
            if account_name not in accounts:
                return {
                    "success": False,
                    "error": f"–ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            if new_password is None:
                from steampassword.utils import generate_password
                new_password = generate_password()
            
            
            settings_manager.set_account_password(account_name, new_password)
            
            return {
                "success": True,
                "new_password": new_password,
                "message": f"–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {str(e)}"
            }
    
    def bulk_change_passwords(self, account_names: list) -> Dict[str, Dict[str, Any]]:
        
            
        results = {}
        
        for account_name in account_names:
            results[account_name] = self.change_password_for_account(account_name)
        
        return results


class SimpleTradeManager:
    
    _global_integrated_manager = None
    
    def __init__(self):
        self.name = "Trade Manager"
    
    def _get_integrated_manager(self):
        if SimpleTradeManager._global_integrated_manager is None:
            from .pysda_trade_manager import IntegratedTradeManager
            SimpleTradeManager._global_integrated_manager = IntegratedTradeManager()
        return SimpleTradeManager._global_integrated_manager
    

    
    def get_trade_confirmations(self, account_name: str) -> Dict[str, Any]:
        
            
        try:
            manager = self._get_integrated_manager()
            result = manager.get_confirmations(account_name)
            
            if not result["success"]:
                return result
            
            formatted_confirmations = []
            for conf in result["confirmations"]:
                formatted_confirmations.append({
                    'confirmation_id': conf['id'],
                    'id': conf['id'],
                    'type': conf['type'],
                    'description': conf['description'],
                    'creator_id': conf['creator_id'],
                    'nonce': conf['nonce'],
                    'confirmation_obj': conf['confirmation'],
                    'executor': conf.get('executor')
                })
            
            return {
                "success": True,
                "confirmations": formatted_confirmations,
                "message": f"–ü–æ–ª—É—á–µ–Ω–æ {len(formatted_confirmations)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è {account_name} —á–µ—Ä–µ–∑ pySDA"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ pySDA: {str(e)}"
            }
    
    def confirm_trade(self, account_name: str, confirmation_obj) -> Dict[str, Any]:
        
            
        try:
            manager = self._get_integrated_manager()
            
            account_manager = manager._get_manager(account_name)
            
            result = account_manager.confirm_guard_confirmation(confirmation_obj)
            
            return {
                "success": result,
                "message": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ" if result else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ pySDA: {str(e)}"
            }

    def accept_confirmation(self, account_name: str, confirmation_id: str) -> Dict[str, Any]:
        
            
        try:
            self._ensure_trade_protection_for_account(account_name)
            
            manager = self._get_integrated_manager()
            
            confirmations_result = manager.get_confirmations(account_name)
            if not confirmations_result["success"]:
                return confirmations_result
            
            confirmation_obj = None
            for conf in confirmations_result["confirmations"]:
                if str(conf['id']) == str(confirmation_id):
                    confirmation_obj = conf['confirmation']
                    break
            
            if confirmation_obj is None:
                return {
                    "success": False,
                    "error": f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å ID {confirmation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                }
            
            return self.confirm_trade(account_name, confirmation_obj)
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}"
            }

    def confirm_all_trades(self, account_name: str) -> Dict[str, Any]:
        
            
        try:
            manager = self._get_integrated_manager()
            result = manager.confirm_all(account_name)
            
            return result
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ —á–µ—Ä–µ–∑ pySDA: {str(e)}"
            }
    
    def auto_accept_gifts(self, account_name: str) -> Dict[str, Any]:
        
            
        try:
            manager = self._get_integrated_manager()
            result = manager.auto_accept_gifts(account_name)
            
            return result
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ pySDA: {str(e)}"
            }
    
    def auto_confirm_trades(self, account_name: str) -> Dict[str, Any]:
        
            
        try:
            manager = self._get_integrated_manager()
            result = manager.auto_confirm_trades(account_name)
            
            return result
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ pySDA: {str(e)}"
            }
    
    def bulk_confirm_trades(self, account_names: List[str]) -> Dict[str, Dict[str, Any]]:
        
            
        results = {}
        for account_name in account_names:
            results[account_name] = self.confirm_all_trades(account_name)
        return results
    
    def _ensure_trade_protection_for_account(self, account_name: str):
        try:
            from core.settings_manager import settings_manager
            
            if settings_manager.is_trade_protection_acknowledged(account_name):
                return
            
            try:
                from steam.steam_integration import steam_trade_manager
                
                password = settings_manager.get_account_password(account_name)
                if not password:
                    print(f"‚ö†Ô∏è {account_name}: –Ω–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è trade protection")
                    return
                
                if account_name not in steam_trade_manager.active_sessions:
                    print(f"üîë {account_name}: –≤—Ö–æ–¥ –≤ Steam –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è trade protection...")
                    login_result = steam_trade_manager.login_account(account_name, password)
                    if not login_result:
                        print(f"‚ùå {account_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Steam –¥–ª—è trade protection")
                        return
                
                print(f"üîê {account_name}: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ trade protection...")
                result = steam_trade_manager.acknowledge_trade_protection_for_account(account_name)
                
                if result.get('success'):
                    if result.get('already_acknowledged'):
                        print(f"‚ÑπÔ∏è {account_name}: trade protection —É–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                    else:
                        print(f"‚úÖ {account_name}: trade protection —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                else:
                    error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    print(f"‚ö†Ô∏è {account_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å trade protection - {error_msg}")
                
            except ImportError:
                print(f"‚ö†Ô∏è {account_name}: Steam API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è trade protection")
            except Exception as e:
                print(f"‚ö†Ô∏è {account_name}: –æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è trade protection - {e}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ _ensure_trade_protection_for_account: {e}")
