import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
from datetime import datetime


class AutomationDialog:
    
    def __init__(self, parent, accounts, update_callback, main_gui=None):
        self.parent = parent
        self.accounts = accounts
        self.update_callback = update_callback
        self.main_gui = main_gui  
        
        if main_gui and hasattr(main_gui, 'automation_running'):
            self.running = main_gui.automation_running
            print(f"üîÑ –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ running={self.running}")
        else:
            self.running = False
            print("‚ö†Ô∏è –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: –≥–ª–∞–≤–Ω–æ–µ GUI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, running=False")
        
        self.automation_manager = None
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
        self.dialog.geometry("800x700")
        self.dialog.resizable(True, True)
        
        from . import set_dialog_icon
        set_dialog_icon(self.dialog)
        
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        self.dialog.geometry("+%d+%d" % (parent.winfo_rootx() + 50, parent.winfo_rooty() + 50))
        
        self.create_interface()
        
        self.dialog.protocol("WM_DELETE_WINDOW", self.on_close)
    
    def create_interface(self):
        canvas = tk.Canvas(self.dialog)
        scrollbar = ttk.Scrollbar(self.dialog, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        title_frame = ttk.Frame(scrollable_frame)
        title_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        ttk.Label(title_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Steam Guard", 
                 font=("Arial", 16, "bold")).pack()
        ttk.Label(title_frame, text="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤", 
                 font=("Arial", 10), foreground="gray").pack()
        
        global_frame = ttk.LabelFrame(scrollable_frame, text="üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding=15)
        global_frame.pack(fill="x", padx=20, pady=10)
        
        interval_frame = ttk.Frame(global_frame)
        interval_frame.pack(fill="x", pady=5)
        
        ttk.Label(interval_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫):").pack(side="left")
        self.interval_var = tk.StringVar(value="300")  
        interval_spinbox = ttk.Spinbox(interval_frame, from_=60, to=3600, width=10, 
                                      textvariable=self.interval_var)
        interval_spinbox.pack(side="right")
        
        ttk.Label(global_frame, text="üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 60-300 —Å–µ–∫—É–Ω–¥ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Steam API)", 
                 font=("Arial", 9), foreground="orange").pack(anchor="w", pady=(0, 10))
        
        attempts_frame = ttk.Frame(global_frame)
        attempts_frame.pack(fill="x", pady=5)
        
        ttk.Label(attempts_frame, text="–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:").pack(side="left")
        self.attempts_var = tk.StringVar(value="3")
        attempts_spinbox = ttk.Spinbox(attempts_frame, from_=1, to=10, width=10,
                                      textvariable=self.attempts_var)
        attempts_spinbox.pack(side="right")
        
        ttk.Label(global_frame, text="‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", 
                 font=("Arial", 9), foreground="gray").pack(anchor="w", pady=(0, 10))
        
        self.autostart_var = tk.BooleanVar()
        ttk.Checkbutton(global_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                       variable=self.autostart_var).pack(anchor="w", pady=5)
        
        self.notifications_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(global_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö",
                       variable=self.notifications_var).pack(anchor="w", pady=5)
        
        types_frame = ttk.LabelFrame(scrollable_frame, text="üéØ –¢–∏–ø—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π", padding=15)
        types_frame.pack(fill="x", padx=20, pady=10)
        
        self.accept_trades_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(types_frame, text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç—Ä–µ–π–¥—ã",
                       variable=self.accept_trades_var).pack(anchor="w", pady=2)
        
        self.accept_gifts_var = tk.BooleanVar(value=True)  
        ttk.Checkbutton(types_frame, text="üéÅ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏",
                       variable=self.accept_gifts_var).pack(anchor="w", pady=2)
        
        self.accept_market_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(types_frame, text="üõí –ü—Ä–∏–Ω–∏–º–∞—Ç—å –º–∞—Ä–∫–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥–∏", 
                       variable=self.accept_market_var).pack(anchor="w", pady=2)
        
        accounts_frame = ttk.LabelFrame(scrollable_frame, text="üë• –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", padding=15)
        accounts_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        list_controls = ttk.Frame(accounts_frame)
        list_controls.pack(fill="x", pady=(0, 10))
        
        ttk.Button(list_controls, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", 
                  command=self.select_all_accounts).pack(side="left", padx=(0, 5))
        ttk.Button(list_controls, text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ", 
                  command=self.deselect_all_accounts).pack(side="left", padx=5)
        
        list_frame = ttk.Frame(accounts_frame)
        list_frame.pack(fill="both", expand=True)
        
        headers_frame = ttk.Frame(list_frame)
        headers_frame.pack(fill="x", pady=(0, 5))
        
        ttk.Label(headers_frame, text="–í–∫–ª—é—á–∏—Ç—å", width=10).pack(side="left", padx=5)
        ttk.Label(headers_frame, text="–õ–æ–≥–∏–Ω", width=20).pack(side="left", padx=5)
        ttk.Label(headers_frame, text="–°—Ç–∞—Ç—É—Å", width=15).pack(side="left", padx=5)
        ttk.Label(headers_frame, text="–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", width=20).pack(side="left", padx=5)
        
        accounts_list_frame = ttk.Frame(list_frame)
        accounts_list_frame.pack(fill="both", expand=True)
        
        accounts_canvas = tk.Canvas(accounts_list_frame, height=200)
        accounts_scrollbar = ttk.Scrollbar(accounts_list_frame, orient="vertical", 
                                         command=accounts_canvas.yview)
        self.accounts_scrollable_frame = ttk.Frame(accounts_canvas)
        
        self.accounts_scrollable_frame.bind(
            "<Configure>",
            lambda e: accounts_canvas.configure(scrollregion=accounts_canvas.bbox("all"))
        )
        
        accounts_canvas.create_window((0, 0), window=self.accounts_scrollable_frame, anchor="nw")
        accounts_canvas.configure(yscrollcommand=accounts_scrollbar.set)
        
        def on_accounts_mousewheel(event):
            accounts_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def bind_accounts_mousewheel(event):
            accounts_canvas.bind_all("<MouseWheel>", on_accounts_mousewheel)
        
        def unbind_accounts_mousewheel(event):
            accounts_canvas.unbind_all("<MouseWheel>")
        
        accounts_canvas.bind('<Enter>', bind_accounts_mousewheel)
        accounts_canvas.bind('<Leave>', unbind_accounts_mousewheel)
        self.accounts_scrollable_frame.bind('<Enter>', bind_accounts_mousewheel)
        self.accounts_scrollable_frame.bind('<Leave>', unbind_accounts_mousewheel)
        
        self.account_vars = {}
        for account_name, account_data in self.accounts.items():
            account_frame = ttk.Frame(self.accounts_scrollable_frame)
            account_frame.pack(fill="x", pady=2)
            
            var = tk.BooleanVar()
            self.account_vars[account_name] = var
            
            checkbox = ttk.Checkbutton(account_frame, variable=var, width=10)
            checkbox.pack(side="left", padx=5)
            
            label1 = ttk.Label(account_frame, text=account_name, width=20)
            label1.pack(side="left", padx=5)
            
            label2 = ttk.Label(account_frame, text="–ì–æ—Ç–æ–≤", width=15, foreground="green")
            label2.pack(side="left", padx=5)
            
            label3 = ttk.Label(account_frame, text="–ù–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è", width=20, foreground="gray")
            label3.pack(side="left", padx=5)
            
            def bind_to_accounts_mousewheel(widget):
                widget.bind('<Enter>', bind_accounts_mousewheel)
                widget.bind('<Leave>', unbind_accounts_mousewheel)
            
            bind_to_accounts_mousewheel(account_frame)
            bind_to_accounts_mousewheel(checkbox)
            bind_to_accounts_mousewheel(label1)
            bind_to_accounts_mousewheel(label2)
            bind_to_accounts_mousewheel(label3)
        
        accounts_canvas.pack(side="left", fill="both", expand=True)
        accounts_scrollbar.pack(side="right", fill="y")
        
        status_frame = ttk.LabelFrame(scrollable_frame, text="üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", padding=15)
        status_frame.pack(fill="x", padx=20, pady=10)
        
        self.status_label = ttk.Label(status_frame, text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", foreground="red")
        self.status_label.pack(anchor="w")
        
        self.stats_label = ttk.Label(status_frame, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0", foreground="gray")
        self.stats_label.pack(anchor="w")
        
        buttons_frame = ttk.Frame(scrollable_frame)
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        self.start_button = ttk.Button(buttons_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é", 
                                      command=self.start_automation, style="success.TButton")
        self.start_button.pack(side="left", padx=(0, 10))
        
        self.stop_button = ttk.Button(buttons_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                     command=self.stop_automation, style="danger.TButton", 
                                     state="disabled")
        self.stop_button.pack(side="left", padx=10)
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.save_settings).pack(side="left", padx=10)
        
        ttk.Button(buttons_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", 
                  command=self.on_close).pack(side="right")
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        self.load_settings()
        
        self.update_ui_state()
    
    def select_all_accounts(self):
        for var in self.account_vars.values():
            var.set(True)
    
    def deselect_all_accounts(self):
        for var in self.account_vars.values():
            var.set(False)
    
    def load_settings(self):
        try:
            if (self.main_gui and hasattr(self.main_gui, 'automation_settings') 
                and self.main_gui.automation_settings):
                
                settings = self.main_gui.automation_settings
                print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ GUI: {settings}")
                
                if hasattr(self, 'interval_var'):
                    self.interval_var.set(str(settings.get('interval', 300)))
                if hasattr(self, 'attempts_var'):
                    self.attempts_var.set(str(settings.get('max_attempts', 3)))
                if hasattr(self, 'notifications_var'):
                    self.notifications_var.set(settings.get('notifications', True))
                if hasattr(self, 'accept_trades_var'):
                    self.accept_trades_var.set(settings.get('accept_trades', True))
                if hasattr(self, 'accept_gifts_var'):
                    self.accept_gifts_var.set(settings.get('accept_gifts', True))
                if hasattr(self, 'accept_market_var'):
                    self.accept_market_var.set(settings.get('accept_market', True))
                
                enabled_accounts = settings.get('enabled_accounts', [])
                for account_name, var in self.account_vars.items():
                    var.set(account_name in enabled_accounts)
                    
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {enabled_accounts}")
            else:
                print("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
    
    def save_settings(self):
        try:
            settings = {
                'interval': int(self.interval_var.get()),
                'max_attempts': int(self.attempts_var.get()),
                'autostart': self.autostart_var.get(),
                'notifications': self.notifications_var.get(),
                'accept_trades': self.accept_trades_var.get(),
                'accept_gifts': self.accept_gifts_var.get(),
                'accept_market': self.accept_market_var.get(),
                'enabled_accounts': [name for name, var in self.account_vars.items() if var.get()]
            }
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def start_automation(self):
        try:
            enabled_accounts = [name for name, var in self.account_vars.items() if var.get()]
            
            if not enabled_accounts:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                return
            
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {enabled_accounts}")
            
            settings = {
                'interval': int(self.interval_var.get()),
                'max_attempts': int(self.attempts_var.get()),
                'notifications': self.notifications_var.get(),
                'enabled_accounts': enabled_accounts,
                'accept_trades': self.accept_trades_var.get(),
                'accept_gifts': self.accept_gifts_var.get(), 
                'accept_market': self.accept_market_var.get()
            }
            
            print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {settings}")
            
            if self.main_gui and hasattr(self.main_gui, 'start_global_automation'):
                print("üîó –í—ã–∑—ã–≤–∞–µ–º start_global_automation...")
                result = self.main_gui.start_global_automation(settings)
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞: {result}")
                
                if result:
                    self.running = True
                    self.update_ui_state()
                    self.status_label.config(text="–ó–∞–ø—É—â–µ–Ω–∞", foreground="green")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(enabled_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings['interval']} —Å–µ–∫")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é")
            else:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ main_gui –∏–ª–∏ –º–µ—Ç–æ–¥—É start_global_automation")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
    
    def stop_automation(self):
        try:
            if self.main_gui and hasattr(self.main_gui, 'stop_global_automation'):
                if self.main_gui.stop_global_automation():
                    self.running = False
                    self.update_ui_state()
                    self.status_label.config(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", foreground="red")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
    
    def update_ui_state(self):
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–∏–∞–ª–æ–≥–∞, running={self.running}")
        
        if self.running:
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            if hasattr(self, 'status_label'):
                self.status_label.config(text="–ó–∞–ø—É—â–µ–Ω–∞", foreground="green")
            print("‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        else:
            self.start_button.config(state="normal") 
            self.stop_button.config(state="disabled")
            if hasattr(self, 'status_label'):
                self.status_label.config(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", foreground="gray")
            print("‚èπÔ∏è UI –æ–±–Ω–æ–≤–ª–µ–Ω: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def on_close(self):
        if self.running:
            from core.settings_manager import settings_manager
            
            if not settings_manager.settings.get('automation_background_info_shown', False):
                messagebox.showinfo("–†–∞–±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ", 
                                   "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
                                   "üìç –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                                   "‚Ä¢ –í–∫–ª–∞–¥–∫—É '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è' –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ\n"
                                   "‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ —Å–Ω–æ–≤–∞\n\n"
                                   "‚ÑπÔ∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è")
                
                settings_manager.settings['automation_background_info_shown'] = True
                settings_manager.save_settings()
        
        self.dialog.destroy()
