import tkinter as tk
from tkinter import ttk, messagebox
import threading
from core.settings_manager import settings_manager


class ConfirmationsDialog:
    def __init__(self, parent, account_login, account_display_name, trade_manager=None):
        self.account_login = account_login
        self.account_display_name = account_display_name
        self.trade_manager = trade_manager
        self.confirmations_data = {}
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(f"Steam Guard –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - {account_display_name}")
        self.dialog.geometry("600x500")
        self.dialog.resizable(True, True)
        
        from . import set_dialog_icon
        set_dialog_icon(self.dialog)
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (500 // 2)
        self.dialog.geometry(f"600x500+{x}+{y}")
        
        self.create_widgets()
        self.load_confirmations()
    
    def create_widgets(self):
        title_frame = ttk.Frame(self.dialog)
        title_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        ttk.Label(title_frame, text=f"Steam Guard –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", 
                 font=("Helvetica", 14, "bold")).pack()
        ttk.Label(title_frame, text=f"{self.account_display_name} ({self.account_login})", 
                 font=("Helvetica", 10), foreground="gray").pack()
        
        control_frame = ttk.Frame(self.dialog)
        control_frame.pack(fill="x", padx=20, pady=(0, 10))
        
        ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.load_confirmations,
                  style="info.TButton").pack(side="left")
        
        ttk.Button(control_frame, text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ", 
                  command=self.confirm_all,
                  style="success.TButton").pack(side="left", padx=(10, 0))
        
        ttk.Button(control_frame, text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ", 
                  command=self.cancel_all,
                  style="danger.TButton").pack(side="left", padx=(10, 0))
        
        list_frame = ttk.LabelFrame(self.dialog, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", padding=10)
        list_frame.pack(fill="both", expand=True, padx=20, pady=(0, 10))
        
        columns = ("–¢–∏–ø", "–û–ø–∏—Å–∞–Ω–∏–µ", "–í—Ä–µ–º—è", "–°—Ç–∞—Ç—É—Å")
        self.confirmations_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=15)
        
        self.confirmations_tree.heading("–¢–∏–ø", text="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
        self.confirmations_tree.heading("–û–ø–∏—Å–∞–Ω–∏–µ", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        self.confirmations_tree.heading("–í—Ä–µ–º—è", text="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")
        self.confirmations_tree.heading("–°—Ç–∞—Ç—É—Å", text="–°—Ç–∞—Ç—É—Å")
        
        self.confirmations_tree.tag_configure("trade", background="#e8f5e8")
        self.confirmations_tree.tag_configure("market", background="#e8f0ff")
        self.confirmations_tree.tag_configure("selected", background="#d4edda")
        
        self.confirmations_tree.column("–¢–∏–ø", width=100)
        self.confirmations_tree.column("–û–ø–∏—Å–∞–Ω–∏–µ", width=250)
        self.confirmations_tree.column("–í—Ä–µ–º—è", width=120)
        self.confirmations_tree.column("–°—Ç–∞—Ç—É—Å", width=80)
        
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.confirmations_tree.yview)
        self.confirmations_tree.configure(yscrollcommand=scrollbar.set)
        
        self.confirmations_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        self.create_context_menu()
        
        action_frame = ttk.Frame(self.dialog)
        action_frame.pack(fill="x", padx=20, pady=(0, 10))
        
        ttk.Button(action_frame, text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ", 
                  command=self.confirm_selected,
                  style="success.TButton").pack(side="left")
        
        ttk.Button(action_frame, text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ", 
                  command=self.cancel_selected,
                  style="danger.TButton").pack(side="left", padx=(10, 0))
        
        help_frame = ttk.Frame(self.dialog)
        help_frame.pack(fill="x", padx=20, pady=(5, 10))
        
        help_text = "üí° –°–æ–≤–µ—Ç: –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –≤—ã–±–æ—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ"
        ttk.Label(help_frame, text=help_text, font=("Arial", 9), foreground="gray").pack(side="left")
        
        buttons_frame = ttk.Frame(self.dialog)
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        ttk.Button(buttons_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                  command=self.dialog.destroy,
                  style="secondary.TButton").pack(side="right")
    
    def create_context_menu(self):
        self.context_menu = tk.Menu(self.dialog, tearoff=0)
        self.context_menu.add_command(label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=self.confirm_selected)
        self.context_menu.add_command(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", command=self.cancel_selected)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID", command=self.copy_confirmation_id)
        
        self.confirmations_tree.bind("<Button-3>", self.show_context_menu)
        
        self.confirmations_tree.bind("<<TreeviewSelect>>", self.on_selection_change)
    
    def show_context_menu(self, event):
        try:
            self.context_menu.post(event.x_root, event.y_root)
        except Exception:
            pass
    
    def on_selection_change(self, event):
        selected = self.confirmations_tree.selection()
        if selected:
            item_data = self.confirmations_tree.item(selected[0])
            values = item_data['values']
            if values and len(values) >= 2:
                conf_type = values[0]
                conf_desc = values[1]
                self.dialog.title(f"Steam Guard –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - {self.account_display_name} | –í—ã–±—Ä–∞–Ω–æ: {conf_type}")
        else:
            self.dialog.title(f"Steam Guard –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - {self.account_display_name}")
    
    def load_confirmations(self):
        for item in self.confirmations_tree.get_children():
            self.confirmations_tree.delete(item)
        self.confirmations_data.clear()
        
        try:
            from pysda import SimpleTradeManager
            
            loading_item = self.confirmations_tree.insert("", "end", values=("üîÑ", "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π...", "‚Äî", "‚Äî"))
            self.confirmations_tree.update()
            
            def load_confirmations_thread():
                try:
                    trade_manager = SimpleTradeManager()
                    result = trade_manager.get_trade_confirmations(self.account_login)
                    self.dialog.after(0, lambda: self.handle_pysda_confirmations_loaded(result, loading_item))
                except Exception as e:
                    self.dialog.after(0, lambda: self.handle_confirmations_error(str(e), loading_item))
            
            thread = threading.Thread(target=load_confirmations_thread)
            thread.daemon = True
            thread.start()
                
        except ImportError:
            self.confirmations_tree.insert("", "end", values=("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å steam_integration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "‚Äî", "‚Äî"))
        except Exception as e:
            self.confirmations_tree.insert("", "end", values=("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", "‚Äî", "‚Äî"))
    
    def handle_trade_confirmations_loaded(self, result, loading_item):
        self.confirmations_tree.delete(loading_item)
        
        if result["success"]:
            confirmations = result.get("confirmations", [])
            if confirmations:
                for conf in confirmations:
                    self.confirmations_tree.insert("", "end", values=(
                        conf.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        conf.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                        conf.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        "–û–∂–∏–¥–∞–µ—Ç"
                    ))
            else:
                self.confirmations_tree.insert("", "end", values=("‚Äî", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π", "‚Äî", "‚Äî"))
        else:
            self.confirmations_tree.insert("", "end", values=("–û—à–∏–±–∫–∞", result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"), "‚Äî", "‚Äî"))

    def handle_confirmations_loaded(self, confirmations, loading_item):
        self.confirmations_tree.delete(loading_item)
        
        if confirmations:
            for conf in confirmations:
                conf_type = conf.get('type', 'Unknown')
                type_mapping = {
                    '1': '–¢—Ä–µ–π–¥',
                    '2': '–¢–æ—Ä–≥–æ–≤–ª—è',
                    '3': '–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Ä—ã–Ω–∫–µ',
                    '4': '–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    '5': '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
                    '6': '–ü–æ–∫—É–ø–∫–∞ –≤ Store',
                    '7': '–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫',
                    '8': '–°–º–µ–Ω–∞ email',
                    '9': '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è',
                    '10': '–î–æ—Å—Ç—É–ø –∫ API –∫–ª—é—á—É',
                    '11': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ Steam Guard',
                    '12': '–ü–æ–∫—É–ø–∫–∞ –≤ Community Market',
                    '13': '–ü–æ–∫—É–ø–∫–∞ –≤ Steam Store',
                    '14': '–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞'
                }
                type_text = type_mapping.get(str(conf_type), f"–¢–∏–ø {conf_type}")
                
                self.confirmations_tree.insert("", "end", values=(
                    type_text,
                    conf.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                    conf.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    "–û–∂–∏–¥–∞–µ—Ç"
                ), tags=(conf.get('id', ''), conf.get('key', '')))
        else:
            self.confirmations_tree.insert("", "end", values=("‚Äî", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π", "‚Äî", "‚Äî"))
    
    def handle_confirmations_error(self, error, loading_item):
        self.confirmations_tree.delete(loading_item)
        
        self.confirmations_tree.insert("", "end", values=("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {error}", "‚Äî", "‚Äî"))
    
    def handle_new_confirmations_loaded(self, confirmations, loading_item):
        self.confirmations_tree.delete(loading_item)
        
        if confirmations:
            for conf in confirmations:
                print(f"[DEBUG] Loading confirmation: {conf}")
                
                conf_type = conf.get('type', 'Unknown')
                type_mapping = {
                    1: '–¢—Ä–µ–π–¥',
                    2: '–¢–æ—Ä–≥–æ–≤–ª—è',
                    3: '–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Ä—ã–Ω–∫–µ',
                    4: '–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    5: '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
                    6: '–ü–æ–∫—É–ø–∫–∞ –≤ Store',
                    7: '–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫',
                    8: '–°–º–µ–Ω–∞ email',
                    9: '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è',
                    10: '–î–æ—Å—Ç—É–ø –∫ API –∫–ª—é—á—É',
                    11: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ Steam Guard',
                    12: '–ü–æ–∫—É–ø–∫–∞ –≤ Community Market',
                    13: '–ü–æ–∫—É–ø–∫–∞ –≤ Steam Store',
                    14: '–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞'
                }
                type_text = type_mapping.get(conf_type, f"–¢–∏–ø {conf_type}")
                
                conf_id = conf.get('id', '')
                conf_key = conf.get('key', '')
                print(f"[DEBUG] Confirmation ID: {conf_id}, Key: {conf_key}")
                
                item_id = self.confirmations_tree.insert("", "end", values=(
                    type_text,
                    conf.get('title', conf.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')),
                    conf.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    "–û–∂–∏–¥–∞–µ—Ç"
                ))
                
                self.confirmations_data[item_id] = {
                    'id': conf_id,
                    'key': conf_key,
                    'data': conf
                }
                print(f"[DEBUG] Saved confirmation data for item {item_id}: id={conf_id}, key={conf_key}")
        else:
            self.confirmations_tree.insert("", "end", values=("‚Äî", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π", "‚Äî", "‚Äî"))
    
    def handle_pysda_confirmations_loaded(self, result, loading_item):
        try:
            self.confirmations_tree.delete(loading_item)
        except:
            pass
        
        if not result.get('success'):
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            self.confirmations_tree.insert("", "end", values=("‚ùå", f"–û—à–∏–±–∫–∞: {error_msg}", "‚Äî", "‚Äî"))
            return
        
        confirmations = result.get('confirmations', [])
        
        if not confirmations:
            self.confirmations_tree.insert("", "end", values=("üì≠", "–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π", "‚Äî", "‚Äî"))
            return
        
        for conf in confirmations:
            conf_type = conf.get('type', 'Unknown')
            type_mapping = {
                1: '–¢—Ä–µ–π–¥',
                2: '–¢–æ—Ä–≥–æ–≤–ª—è',
                3: '–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Ä—ã–Ω–∫–µ',
                4: '–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                5: '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
                6: '–ü–æ–∫—É–ø–∫–∞ –≤ Store',
                7: '–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫',
                8: '–°–º–µ–Ω–∞ email',
                9: '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è',
                10: '–î–æ—Å—Ç—É–ø –∫ API –∫–ª—é—á—É',
                11: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ Steam Guard',
                12: '–ü–æ–∫—É–ø–∫–∞ –≤ Community Market',
                13: '–ü–æ–∫—É–ø–∫–∞ –≤ Steam Store',
                14: '–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞'
            }
            type_text = type_mapping.get(conf_type, f"–¢–∏–ø {conf_type}")
            
            conf_id = conf.get('confirmation_id', conf.get('id', ''))
            
            item_id = self.confirmations_tree.insert("", "end", values=(
                type_text,
                conf.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "–û–∂–∏–¥–∞–µ—Ç"
            ))
            
            self.confirmations_data[item_id] = {
                'id': conf_id,
                'confirmation_obj': conf.get('confirmation_obj'),
                'executor': conf.get('executor'),
                'data': conf,
                'type': 'pysda'
            }

    def confirm_selected(self):
        selected = self.confirmations_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –Ω–µ —Å–¥–µ–ª–∞–Ω", 
                                 "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π,\n"
                                 "–∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ'")
            return
        
        try:
            item_id = selected[0]
            
            if item_id not in self.confirmations_data:
                print(f"[DEBUG] Item {item_id} not found in confirmations_data")
                print(f"[DEBUG] Available items: {list(self.confirmations_data.keys())}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {item_id}")
                return
                
            confirmation_data = self.confirmations_data[item_id]
            confirmation_id = confirmation_data['id']
            
            if confirmation_data.get('type') == 'pysda':
                confirmation_obj = confirmation_data.get('confirmation_obj')
                if not confirmation_obj:
                    messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è pySDA")
                    return
                
                def confirm_pysda_thread():
                    try:
                        from pysda import SimpleTradeManager
                        trade_manager = SimpleTradeManager()
                        result = trade_manager.confirm_trade(self.account_login, confirmation_obj)
                        self.dialog.after(0, lambda: self.handle_confirm_result(result.get('success', False), item_id))
                    except Exception as e:
                        self.dialog.after(0, lambda: self.handle_confirm_error(str(e)))
                
                thread = threading.Thread(target=confirm_pysda_thread)
                thread.daemon = True
                thread.start()
                return
            
            confirmation_key = confirmation_data.get('key')
            
            print(f"[DEBUG] Confirmation Key: {confirmation_key}")
            
            if not confirmation_id or not confirmation_key:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ID: {confirmation_id}, Key: {confirmation_key}")
                return
            
            from steam.steam_integration import steam_trade_manager
            
            password = settings_manager.get_account_password(self.account_login)
            if not password:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            def confirm_thread():
                try:
                    session_id = steam_trade_manager.login_account(self.account_login, password)
                    if not session_id:
                        self.dialog.after(0, lambda: self.handle_confirm_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"))
                        return
                    
                    success = steam_trade_manager.confirm_confirmation(
                        self.account_login, 
                        confirmation_id, 
                        confirmation_key, 
                        accept=True
                    )
                    self.dialog.after(0, lambda: self.handle_confirm_result(success, selected[0]))
                except Exception as e:
                    self.dialog.after(0, lambda: self.handle_confirm_error(str(e)))
            
            thread = threading.Thread(target=confirm_thread)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
    
    def handle_confirm_result(self, success, item_id):
        if success:
            self.confirmations_tree.delete(item_id)
            if item_id in self.confirmations_data:
                del self.confirmations_data[item_id]
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
    
    def handle_confirm_error(self, error):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {error}")
    
    def cancel_selected(self):
        selected = self.confirmations_tree.selection()
        if not selected:
            messagebox.showwarning("–í—ã–±–æ—Ä –Ω–µ —Å–¥–µ–ª–∞–Ω", 
                                 "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π,\n"
                                 "–∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ'")
            return
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Steam –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
    
    def confirm_all(self):
        items = self.confirmations_tree.get_children()
        if not items:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        real_confirmations = []
        for item in items:
            if item in self.confirmations_data:
                conf_data = self.confirmations_data[item]
                if conf_data['id'] and conf_data['key']:
                    real_confirmations.append((item, conf_data['id'], conf_data['key']))
        
        if not real_confirmations:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                 f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã? ({len(real_confirmations)} —à—Ç.)"):
            return
        
        try:
            def confirm_all_thread():
                try:
                    from pysda import SimpleTradeManager
                    trade_manager = SimpleTradeManager()
                    
                    result = trade_manager.confirm_all_trades(self.account_login)
                    
                    if result.get('success'):
                        confirmed_count = result.get('accepted', 0)
                        if confirmed_count > 0:
                            self.dialog.after(0, lambda: self.load_confirmations())
                        
                        self.dialog.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", 
                                                                        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed_count} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"))
                    else:
                        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        self.dialog.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: {error_msg}"))
                
                except Exception as e:
                    self.dialog.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {str(e)}"))
            
            thread = threading.Thread(target=confirm_all_thread)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
    
    def cancel_all(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã?"):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã (–¥–µ–º–æ)")
    
    def copy_confirmation_id(self):
        selected = self.confirmations_tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            return
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–¥–µ–º–æ)")
