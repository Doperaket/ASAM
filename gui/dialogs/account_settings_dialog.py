import tkinter as tk
from tkinter import ttk, messagebox
import threading
from core.settings_manager import settings_manager


class AccountSettingsDialog:
    def __init__(self, parent, account_login, account_display_name):
        self.account_login = account_login
        self.account_display_name = account_display_name
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ - {account_display_name}")
        self.dialog.geometry("500x400")
        self.dialog.resizable(False, False)
        
        from . import set_dialog_icon
        set_dialog_icon(self.dialog)
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (400 // 2)
        self.dialog.geometry(f"500x400+{x}+{y}")
        
        self.create_widgets()
    
    def create_widgets(self):
        title_frame = ttk.Frame(self.dialog)
        title_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        ttk.Label(title_frame, text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", 
                 font=("Helvetica", 14, "bold")).pack()
        ttk.Label(title_frame, text=f"{self.account_display_name} ({self.account_login})", 
                 font=("Helvetica", 10), foreground="gray").pack()
        
        password_frame = ttk.LabelFrame(self.dialog, text="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è", padding=15)
        password_frame.pack(fill="x", padx=20, pady=10)
        
        current_frame = ttk.Frame(password_frame)
        current_frame.pack(fill="x", pady=(0, 10))
        
        ttk.Label(current_frame, text="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:").pack(side="left")
        current_password = settings_manager.get_account_password(self.account_login)
        masked_password = "*" * len(current_password) if current_password else "–ù–µ –∑–∞–¥–∞–Ω"
        ttk.Label(current_frame, text=masked_password, foreground="gray").pack(side="left", padx=(10, 0))
        
        new_password_frame = ttk.Frame(password_frame)
        new_password_frame.pack(fill="x", pady=(0, 10))
        
        ttk.Label(new_password_frame, text="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", font=("Helvetica", 10, "bold")).pack(anchor="w")
        
        password_input_frame = ttk.Frame(new_password_frame)
        password_input_frame.pack(fill="x", pady=(5, 0))
        
        self.password_var = tk.StringVar()
        self.password_entry = ttk.Entry(password_input_frame, textvariable=self.password_var, 
                                       show="*", font=("Helvetica", 10))
        self.password_entry.pack(side="left", fill="x", expand=True)
        
        self.show_password_var = tk.BooleanVar()
        show_password_btn = ttk.Checkbutton(password_input_frame, text="üëÅ", 
                                           variable=self.show_password_var, 
                                           command=self.toggle_password_visibility)
        show_password_btn.pack(side="right", padx=(5, 0))
        
        password_buttons_frame = ttk.Frame(password_frame)
        password_buttons_frame.pack(fill="x", pady=(10, 0))
        
        ttk.Button(password_buttons_frame, text="üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å", 
                  command=self.generate_random_password,
                  style="secondary.TButton").pack(side="left")
        
        ttk.Button(password_buttons_frame, text="üîë –°–º–µ–Ω–∏—Ç—å –≤ Steam", 
                  command=self.change_password_steam_api,
                  style="warning.TButton").pack(side="left", padx=(5, 0))
        
        ttk.Button(password_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", 
                  command=self.save_password,
                  style="success.TButton").pack(side="right")
        
        info_frame = ttk.Frame(password_frame)
        info_frame.pack(fill="x", pady=(10, 0))
        
        info_text = ("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                    "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å' - —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ\n"
                    "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ 'üîë –°–º–µ–Ω–∏—Ç—å –≤ Steam' - –∏–∑–º–µ–Ω–∏—Ç –ø–∞—Ä–æ–ª—å –≤ Steam —á–µ—Ä–µ–∑ API\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π 8-32 —Å–∏–º–≤–æ–ª–∞ —Å –±—É–∫–≤–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏")
        ttk.Label(info_frame, text=info_text, foreground="gray", 
                 font=("Helvetica", 9)).pack(anchor="w")
        
        buttons_frame = ttk.Frame(self.dialog)
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        ttk.Button(buttons_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                  command=self.dialog.destroy,
                  style="secondary.TButton").pack(side="right")
    
    def toggle_password_visibility(self):
        if self.show_password_var.get():
            self.password_entry.config(show="")
        else:
            self.password_entry.config(show="*")
    
    def generate_random_password(self):
        import random
        import string
        
        lowercase = string.ascii_lowercase
        uppercase = string.ascii_uppercase  
        digits = string.digits
        special_chars = "!@#$%^&*"
        
        length = random.randint(8, 10)
        
        password = [
            random.choice(lowercase),
            random.choice(uppercase),
            random.choice(digits),
            random.choice(special_chars)
        ]
        
        all_chars = lowercase + uppercase + digits + special_chars
        for _ in range(length - 4):
            password.append(random.choice(all_chars))
        
        random.shuffle(password)
        generated_password = ''.join(password)
        
        self.password_var.set(generated_password)
        
        messagebox.showinfo("–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", 
                           f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π {length} —Å–∏–º–≤–æ–ª–æ–≤.\n"
                           f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ!")
    
    def save_password(self):
        new_password = self.password_var.get().strip()
        
        if not new_password:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
            return
        
        if len(new_password) < 4:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")
            return
        
        try:
            success = settings_manager.set_account_password(self.account_login, new_password)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                self.password_var.set("")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {str(e)}")

    def change_password_steam_api(self):
        try:
            from steam.steam_integration import change_password_sync, STEAM_MODULES_AVAILABLE
            
            if not STEAM_MODULES_AVAILABLE:
                messagebox.showerror("–û—à–∏–±–∫–∞", "Steam API –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
                return
            
            current_password = settings_manager.get_account_password(self.account_login)
            if not current_password:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞")
                return
            
            new_password = self.password_var.get().strip()
            if not new_password:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞")
                return
            
            if len(new_password) < 4:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")
                return
            
            if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                     f"–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account_display_name} —á–µ—Ä–µ–∑ Steam API?\n\n"
                                     f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {new_password}\n\n"
                                     "–≠—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –ø–∞—Ä–æ–ª—å –≤ Steam –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ.\n"
                                     "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Steam Guard –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ."):
                return
            
            progress_dialog = tk.Toplevel(self.dialog)
            progress_dialog.title("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")
            progress_dialog.geometry("300x100")
            progress_dialog.transient(self.dialog)
            progress_dialog.grab_set()
            
            progress_dialog.update_idletasks()
            x = (progress_dialog.winfo_screenwidth() // 2) - (300 // 2)
            y = (progress_dialog.winfo_screenheight() // 2) - (100 // 2)
            progress_dialog.geometry(f"300x100+{x}+{y}")
            
            ttk.Label(progress_dialog, text="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è...", 
                     font=("Helvetica", 10)).pack(pady=20)
            progress_bar = ttk.Progressbar(progress_dialog, mode='indeterminate')
            progress_bar.pack(pady=10, padx=20, fill="x")
            progress_bar.start()
            
            progress_dialog.update()
            
            def change_password_thread():
                try:
                    result = change_password_sync(self.account_login, current_password, new_password)
                    
                    progress_dialog.after(0, lambda: handle_password_change_result(result))
                except Exception as e:
                    progress_dialog.after(0, lambda: handle_password_change_error(str(e)))
            
            def handle_password_change_result(result):
                progress_dialog.destroy()
                
                if result["success"]:
                    used_password = result.get("new_password", new_password)
                    settings_manager.set_account_password(self.account_login, used_password)
                    self.password_var.set(used_password)
                    
                    messagebox.showinfo("–£—Å–ø–µ—Ö", 
                                      f"–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Steam API!\n\n"
                                      f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {used_password}\n\n"
                                      "–ü–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞.")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å:\n{result['error']}")
            
            def handle_password_change_error(error):
                progress_dialog.destroy()
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:\n{error}")
            
            thread = threading.Thread(target=change_password_thread)
            thread.daemon = True
            thread.start()
            
        except ImportError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å steam_integration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
