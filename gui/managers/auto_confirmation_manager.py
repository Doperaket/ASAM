import threading
import time
from core.settings_manager import settings_manager


class AutoConfirmationManager:
    
    def __init__(self, settings, log_callback):
        self.settings = settings
        self.log_callback = log_callback
        self.running = False
        self.thread = None
        self.stop_event = threading.Event()
        
        try:
            from pysda.simple_integration import SimpleTradeManager
            self.trade_manager = SimpleTradeManager()
        except ImportError as e:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pySDA: {e}")
    
    def start(self):
        print(f"üéØ AutoConfirmationManager.start() –≤—ã–∑–≤–∞–Ω")
        
        if self.running:
            print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {self.settings}")
        
        self.running = True
        self.stop_event.clear()
        
        self.thread = threading.Thread(target=self._automation_loop, daemon=True)
        self.thread.start()
        
        print("‚úÖ –ü–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
        return True
    
    def stop(self):
        if not self.running:
            return
        
        self.running = False
        self.stop_event.set()
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=1)
    
    def _automation_loop(self):
        try:
            accounts = self.settings.get('enabled_accounts', [])
            check_interval = self.settings.get('interval', 300)
            
            print(f"üéØ _automation_loop –∑–∞–ø—É—â–µ–Ω")
            print(f"üìã –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {accounts}")
            print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫")
            
            self.log_callback(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            self.log_callback(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫")
            
            while self.running and not self.stop_event.is_set():
                try:
                    print(f"üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                    for account_login in accounts:
                        if not self.running or self.stop_event.is_set():
                            break
                        
                        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_login}")
                        self._check_account(account_login)
                    
                    if self.running:
                        print(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {check_interval} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                        self.log_callback(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {check_interval} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                        self.stop_event.wait(timeout=check_interval)
                        
                except Exception as e:
                    self.log_callback(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
                    time.sleep(60)
                    
        except Exception as e:
            self.log_callback(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        finally:
            self.running = False
            self.log_callback("üõë –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _check_account(self, account_login):
        try:
            self.log_callback(f"üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_login}")
            
            accounts = settings_manager.get_accounts()
            if account_login not in accounts:
                self.log_callback(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_login} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            account_data = accounts[account_login]
            mafile_name = account_data.get('mafile')
            
            if not mafile_name:
                self.log_callback(f"‚ö†Ô∏è –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_login} –Ω–µ—Ç mafile")
                return
            
            display_name = account_data.get('display_name', account_login)
            
            mafile_basename = mafile_name
            if mafile_basename.endswith('.maFile'):
                mafile_basename = mafile_basename[:-7]
            
            self.log_callback(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {display_name}...")
            self.log_callback(f"üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è {mafile_basename}...")
            
            result = self.trade_manager.get_trade_confirmations(mafile_basename)
            
            if not result['success']:
                self.log_callback(f"‚ùå {display_name}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return
            
            confirmations = result.get('confirmations', [])
            
            if not confirmations:
                self.log_callback(f"‚úÖ {display_name}: –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
                return
            
            self.log_callback(f"üìã {display_name}: –Ω–∞–π–¥–µ–Ω–æ {len(confirmations)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
            
            accepted_count = 0
            
            for conf in confirmations:
                if not self.running or self.stop_event.is_set():
                    break
                
                conf_type = conf.get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                conf_desc = conf.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                self.log_callback(f"üîç {display_name}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–∏–ø={conf_type} –æ–ø–∏—Å–∞–Ω–∏–µ='{conf_desc}'")
                
                if self._should_accept_confirmation(conf):
                    self.log_callback(f"‚úÖ {display_name}: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ–º...")
                    
                    self._ensure_trade_protection_acknowledged(account_login)
                    
                    accept_result = self.trade_manager.accept_confirmation(mafile_basename, conf['id'])
                    
                    if accept_result['success']:
                        accepted_count += 1
                        self.log_callback(f"‚úÖ {display_name}: –ø—Ä–∏–Ω—è—Ç–æ {conf_type}")
                    else:
                        error_msg = accept_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        self.log_callback(f"‚ùå {display_name}: –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è - {error_msg}")
                    
                    time.sleep(2)
                else:
                    self.log_callback(f"‚è≠Ô∏è {display_name}: –ø—Ä–æ–ø—É—â–µ–Ω–æ {conf_type} (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º)")
            
            if accepted_count > 0:
                self.log_callback(f"üéâ {display_name}: –ø—Ä–∏–Ω—è—Ç–æ {accepted_count} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
                
        except Exception as e:
            self.log_callback(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {account_login}: {e}")
    
    def _should_accept_confirmation(self, confirmation):
        try:
            conf_type = confirmation.get('type', 0)
            
            numeric_type_categories = {
                1: 'trades',
                2: 'trades',
                3: 'market',
                6: 'store',
                7: 'market',
                12: 'market',
                13: 'store',
                14: 'gifts'
            }
            
            string_type_categories = {
                'Trade': 'trades',
                'Market Transaction': 'trades',
                'Market Listing': 'market',
                'Store Transaction': 'store',
                'Community Market Purchase': 'market',
                'Steam Store Purchase': 'store',
                'Gift Purchase': 'gifts'
            }
            
            if isinstance(conf_type, (int, float)):
                category = numeric_type_categories.get(conf_type, 'unknown')
            else:
                category = string_type_categories.get(str(conf_type), 'unknown')
            

            
            if category == 'trades' and not self.settings.get('accept_trades', True):
                return False
            elif category == 'market' and not self.settings.get('accept_market', True):  
                return False
            elif category == 'store' and not self.settings.get('accept_store', True):
                return False
            elif category == 'gifts' and not self.settings.get('accept_gifts', True):
                return False
            elif category == 'unknown':
                if not self.settings.get('accept_unknown', False):
                    return False
            
            max_value = self.settings.get('max_value', float('inf'))
            if max_value < float('inf'):
                pass
            
            if self.settings.get('friends_only', False):
                pass
            
            return True
            
        except Exception as e:
            self.log_callback(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False
    
    def _ensure_trade_protection_acknowledged(self, account_login: str):
        try:
            from core.settings_manager import settings_manager
            
            if settings_manager.is_trade_protection_acknowledged(account_login):
                return
            
            try:
                from steam.steam_integration import steam_trade_manager
                
                password = settings_manager.get_account_password(account_login)
                if not password:
                    self.log_callback(f"‚ö†Ô∏è {account_login}: –Ω–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è trade protection")
                    return
                
                if account_login not in steam_trade_manager.active_sessions:
                    self.log_callback(f"üîë {account_login}: –≤—Ö–æ–¥ –≤ Steam –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è trade protection...")
                    login_result = steam_trade_manager.login_account(account_login, password)
                    if not login_result:
                        self.log_callback(f"‚ùå {account_login}: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Steam –¥–ª—è trade protection")
                        return
                
                self.log_callback(f"üîê {account_login}: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ trade protection...")
                result = steam_trade_manager.acknowledge_trade_protection_for_account(account_login)
                
                if result.get('success'):
                    if result.get('already_acknowledged'):
                        self.log_callback(f"‚ÑπÔ∏è {account_login}: trade protection —É–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                    else:
                        self.log_callback(f"‚úÖ {account_login}: trade protection —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                else:
                    error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    self.log_callback(f"‚ö†Ô∏è {account_login}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å trade protection - {error_msg}")
                
            except ImportError:
                self.log_callback(f"‚ö†Ô∏è {account_login}: Steam API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è trade protection")
            except Exception as e:
                self.log_callback(f"‚ö†Ô∏è {account_login}: –æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è trade protection - {e}")
                
        except Exception as e:
            self.log_callback(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ _ensure_trade_protection_acknowledged: {e}")
